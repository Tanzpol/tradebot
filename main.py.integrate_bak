from flask import Flask, jsonify, request, Response
from binance.spot import Spot as BinanceClient
from datetime import datetime
import html
import time

from config import FLASK_SECRET
from bot import TradeBot
import threading
import time
from bot import TradeBot
import threading
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π TradeBot –∏ –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
trade_bot: TradeBot = None
bot_thread: threading.Thread = None
bot_stop_event = threading.Event()

def run_bot_in_background():
    """–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ TradeBot —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."""
    global trade_bot
    try:
        trade_bot = TradeBot()
        print("ü§ñ TradeBot –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ...")
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
        while not bot_stop_event.is_set():
            time.sleep(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ TradeBot: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π TradeBot –∏ –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
trade_bot: TradeBot = None
bot_thread: threading.Thread = None
bot_stop_event = threading.Event()

app = Flask(__name__)
app.secret_key = FLASK_SECRET

DEFAULT_SYMBOL = "BTCUSDC"

def get_price(symbol: str):
    # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Binance (–±–µ–∑ –∫–ª—é—á–µ–π). –ë–µ—Ä—ë–º —Ü–µ–Ω—É —Å –º–µ–π–Ω–Ω–µ—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏.
    client = BinanceClient()
    data = client.ticker_price(symbol)
    return float(data["price"])

@app.get("/")
def index():
    # –ü—Ä–æ—Å—Ç–æ–π HTML –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ ‚Äî —Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ –∫—É—Ä—Å –≤–∂–∏–≤—É—é.
    return Response("""<!doctype html>
<html lang="ru">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>TradeSRVbot ‚Äî –ñ–∏–≤–æ–π –∫—É—Ä—Å</title>
<style>
  body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;margin:24px}}
  .row{{display:flex;gap:12px;flex-wrap:wrap;align-items:center}}
  .price{{font-size:42px;font-weight:700}}
  .muted{{color:#666}}
  .ok{{color:#0a0}}
  .warn{{color:#b00}}
  input,select,button{{padding:8px 10px;border:1px solid #ccc;border-radius:8px}}
  .card{{border:1px solid #ddd;border-radius:12px;padding:16px;margin-top:16px}}
</style>
</head>
<body>
  <h1>TradeSRVbot</h1>
  <div class="card">
    <div class="row">
      <label for="symbol">–ü–∞—Ä–∞:</label>
      <select id="symbol">
        <option value="BTCUSDC" selected>BTC/USDC</option>
        <option value="BTCUSDT">BTC/USDT</option>
        <option value="BNBUSDC">BNB/USDC</option>
      </select>
      <span id="status" class="muted">–ò–¥—ë—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶</span>
    </div>
    <div class="row" style="margin-top:8px">
      <div class="price"><span id="price">‚Äî</span></div>
      <div class="muted">–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span id="ts">‚Äî</span></div>
    </div>
  </div>

  <script>
    const priceEl = document.getElementById('price');
    const tsEl = document.getElementById('ts');
    const statusEl = document.getElementById('status');
    const sel = document.getElementById('symbol');

    let last = null;
    let timer = null;

    function fmt(n){ return Number(n).toLocaleString('ru-RU', {minimumFractionDigits:2, maximumFractionDigits:2}); }
    function now(){ const d=new Date(); return d.toLocaleTimeString('ru-RU'); }

    async function poll(){
      const symbol = sel.value;
      try{
        const r = await fetch(`/api/price?symbol=${encodeURIComponent(symbol)}`, {cache:'no-store'});
        if(!r.ok) throw new Error('HTTP '+r.status);
        const j = await r.json();
        const p = Number(j.price);
        const prev = last; last = p;
        priceEl.textContent = fmt(p);
        tsEl.textContent = now();
        // –º–∏–≥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–º: —Ä–æ—Å—Ç –∑–µ–ª—ë–Ω—ã–π, –ø–∞–¥–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–π
        if(prev !== null){
          const up = p > prev; const cls = up ? 'ok' : 'warn';
          priceEl.classList.add(cls);
          setTimeout(()=>priceEl.classList.remove(cls), 300);
        }
        statusEl.textContent = 'Live'; statusEl.className = 'ok';
      }catch(e){
        statusEl.textContent = '–ü–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ ‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶';
        statusEl.className = 'warn';
      }
    }

    function start(){
      if(timer) clearInterval(timer);
      poll();
      timer = setInterval(poll, 500); // ~2 —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É
    }

    sel.addEventListener('change', start);
    start();
  </script>
</body>
</html>""", mimetype="text/html")

@app.get("/api/price")
def api_price():

def run_bot_in_background():
    """–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ TradeBot —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º."""
    global trade_bot
    try:
        trade_bot = TradeBot()
        print("ü§ñ TradeBot –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ...")
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
        while not bot_stop_event.is_set():
            time.sleep(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ TradeBot: {e}")


# –ó–∞–ø—É—Å–∫ TradeBot –≤ —Ñ–æ–Ω–µ
print("üöÄ –ó–∞–ø—É—Å–∫ TradeBot...")
bot_thread = threading.Thread(target=run_bot_in_background, daemon=True)
bot_thread.start()

# –ó–∞–ø—É—Å–∫ Flask
app.run(host="0.0.0.0", port=5000, debug=True)

# –ó–∞–ø—É—Å–∫ TradeBot –≤ —Ñ–æ–Ω–µ
print("üöÄ –ó–∞–ø—É—Å–∫ TradeBot...")
bot_thread = threading.Thread(target=run_bot_in_background, daemon=True)
bot_thread.start()

# –ó–∞–ø—É—Å–∫ Flask
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
